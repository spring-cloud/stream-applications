name: 'scale-up'
description: 'Scale Up Private GitHub Runners'

on:
  workflow_call:
    inputs:
      max_parallel:
        type: number
        required: true
      verbose:
        type: boolean
        required: false
        default: false
    outputs:
      runner-type:
        value: ${{ jobs.scale-up.outputs.runner-type }}
    secrets:
      GCP_CRED_JSON:
        required: false
      TMC_API_TOKEN:
        required: false
      GH_ARC_APP_ID:
        required: false
      GH_ARC_INSTALLATION_ID:
        required: false
      GH_ARC_PRIVATE_KEY:
        required: false
      GH_ARC_PAT:
        required: false
jobs:
  scale-up:
    runs-on: ubuntu-latest
    concurrency:
      group: stream-apps-gh-runners
      cancel-in-progress: false
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Configure provider for stream-apps-gh-runners'
        shell: bash
        timeout-minutes: 15
        run: |
          RUNNER_TYPE=$(./scripts/determine-provider.sh stream-apps-gh-runners)
          echo "RUNNER_TYPE=$RUNNER_TYPE"
          echo "RUNNER_TYPE=$RUNNER_TYPE" >> $GITHUB_ENV
      - name: 'Install: gcloud cli'
        if: ${{ env.RUNNER_TYPE == 'gke' }}
        uses: ./.github/actions/install-gcloud
      - name: 'Action: gcloud auth'
        if: ${{ env.RUNNER_TYPE == 'gke' }}
        id: auth_gcloud
        uses: 'google-github-actions/auth@v0'
        with:
          create_credentials_file: true
          credentials_json: ${{ secrets.GCP_CRED_JSON }}
      - name: 'Configure: Install TMC'
        if: ${{ env.RUNNER_TYPE == 'tmc' }}
        uses: ./.github/actions/install-tmc
      - name: 'Action: Login to TMC'
        if: ${{ env.RUNNER_TYPE == 'tmc' }}
        uses: ./.github/actions/auth-tmc
        timeout-minutes: 15
        with:
          tmc_api_token: '${{ secrets.TMC_API_TOKEN }}'
          fail_on_error: false
      - name: 'Install: Groovy'
        uses: ./.github/actions/install-groovy
        with:
          version: 4.0.4
      - name: 'Action: wait for cluster - stream-apps-gh-runners'
        shell: bash
        timeout-minutes: 5
        env:
          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
        run: ./scripts/wait-for-cluster-${RUNNER_TYPE}.sh stream-apps-gh-runners
      - name: 'Configure: Cluster Region'
        if: ${{ env.PROVIDER == 'gke' }}
        shell: bash
        run: |
          set +e
          REGION=$(gcloud container clusters list | grep -F "stream-apps-gh-runners" | awk '{print $2}')
          if [ "$REGION" == "" ]; then
            echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
          else
            REG_MT=$(./scripts/determine-default.sh stream-apps-gh-runners "machine_type")
            export REGION
            CUR_MT=$(./scripts/determine-machine-type.sh)
            if [ "$REQ_MT" != "$CUR_MT" ]; then
              echo "::notice ::Current machinetype is $CUR_MT and required is $REQ_MT"
              echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
            fi
          fi
          echo "REGION=${{ inputs.region }}" >> $GITHUB_ENV
      - name: 'Action: Re/Create SCDF PRO Runners'
        if: ${{ env.CREATE_CLUSTER == 'true' }}
        shell: bash
        env:
          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
        run: |
          set +e
          ./scripts/delete-runners-${RUNNER_TYPE}.sh
          set -e
          ./scripts/create-runners-cluster-${RUNNER_TYPE}.sh
      - name: 'Action: scale cluster - stream-apps-gh-runners for ${{ inputs.max_parallel }} runners'
        shell: bash
        timeout-minutes: 30
        env:
          CLUSTER_NAME: 'stream-apps-gh-runners'
          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
        run: |
          echo "::notice ::Scaling stream-apps-gh-runners to ${{ inputs.max_parallel }} pods"
          ./scripts/scale-cluster-pods.sh stream-apps-gh-runners ${{ inputs.max_parallel }}
      - name: 'Check: Wait for cluster nodes: stream-apps-gh-runners'
        shell: bash
        timeout-minutes: 25
        env:
          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
        run: |
          echo "::notice ::Waiting for cluster stream-apps-gh-runners and it's nodes"
          ./scripts/wait-for-cluster-${RUNNER_TYPE}.sh stream-apps-gh-runners --nodes
      - name: 'Action: Increase runners with ${{ inputs.max_parallel }}'
        timeout-minutes: 10
        uses: ./.github/actions/increase-runners
        with:
          inc: ${{ inputs.max_parallel }}
    outputs:
      runner-type: '${{ env.RUNNER_TYPE }}'
