name: 'Stream Applications - Common'

on:
  workflow_call:
    inputs:
      branch:
        type: string
        required: false
        default: 'main'
        description: 'Version Tag'
      verbose:
        type: boolean
        required: false
        default: true
        description: 'Verbose output'
      scale:
        type: boolean
        required: false
        default: false
        description: 'Scale and use private runners'
    secrets:
      DOCKER_HUB_USERNAME:
      DOCKER_HUB_PASSWORD:
      TMC_API_TOKEN:
      GCP_CRED_JSON:
      CI_DEPLOY_USERNAME:
      CI_DEPLOY_PASSWORD:

jobs:
  parameters:
    runs-on: ubuntu-latest
    steps:
      - name: 'Configure: checkout'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: 'Configure: Ensure scripts are executable'
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: create streams applications matrix'
        shell: bash
        env:
          VERBOSE: ${{ inputs.verbose && 'true' || '' }}
        run: |
          ROOT_DIR=$(realpath $PWD)
          echo "::info ::checking stream-applications for apps"
          pushd stream-applications > /dev/null
            $ROOT_DIR/create-matrixes.sh
            if [ ! -f matrix.json ]; then
              echo "Expected to find matrix.json in:"
              ls -al
              exit 2
            fi
            COUNT=$(jq '.count' matrix.json)
            MAX_PARALLEL=$((5 * COUNT / 4))
            if ((MAX_PARALLEL == COUNT)); then
              MAX_PARALLEL=$((COUNT + 1))
            fi          
            MATRIX=$(jq -c . matrix.json)
            PROCESSORS=$(jq -c '.processors' matrix.json)
            SINKS=$(jq -c '.sinks' matrix.json)
            SOURCES=$(jq -c '.sources' matrix.json)
            echo "MAX_PARALLEL=$MAX_PARALLEL" >> $GITHUB_ENV
            echo "MATRIX=$MATRIX" >> $GITHUB_ENV
            echo "PROCESSORS=$PROCESSORS" >> $GITHUB_ENV
            echo "SINKS=$SINKS" >> $GITHUB_ENV
            echo "SOURCES=$SOURCES" >> $GITHUB_ENV
            if [ "${{ inputs.verbose }}" == "true" ]; then
              echo "::debug ::MAX_PARALLEL=$MAX_PARALLEL"
              echo "::debug ::MATRIX=$MATRIX"
              echo "::debug ::PROCESSORS=$PROCESSORS"
              echo "::debug ::SINKS=$SINKS"
              echo "::debug ::SOURCES=$SOURCES"
            fi
          popd
          if [ "${{ inputs.branch }}" == "main" ]; then
            echo "JDK_BUILD=17" >> $GITHUB_ENV
            echo "JRE_DEFAULT=17" >> $GITHUB_ENV
          else
            echo "JDK_BUILD=8" >> $GITHUB_ENV
            echo "JRE_DEFAULT=11" >> $GITHUB_ENV
          fi
    outputs:
      max_parallel: ${{ env.MAX_PARALLEL }}
      sources: ${{ env.SOURCES }}
      sinks: ${{ env.SINKS }}
      processors: ${{ env.PROCESSORS }}
      matrix: ${{ env.matrix }}
      jdk_build: ${{ env.JDK_BUILD }}
      jre_version: ${{ env.JRE_DEFAULT }}
#  scale-runners:
#    if: ${{ inputs.scale }}
#    needs:
#      - parameters
#    concurrency:
#      group: stream-apps-gh-runners
#      cancel-in-progress: false
#    uses: ./.github/workflows/scale-runners-up.yml
#    with:
#      verbose: ${{ inputs.verbose }}
#      max_parallel: ${{ toJson(needs.parameters.outputs.max_parallel) }}
  core:
    runs-on: ubuntu-latest
    needs:
      - parameters
    steps:
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: 'Configure: Ensure scripts are executable'
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Action: build initial dependencies'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          VERBOSE: ${{ inputs.verbose }}
        run: |
          ROOT_DIR=$(realpath $PWD)
          MAVEN_OPT="-B -T 1C -s $ROOT_DIR/.settings.xml ${{ inputs.verbose && '--debug' || '' }}"
          echo "::notice ::building - stream-applications-build"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f stream-applications-build
          set +e
          echo "::notice ::building - functions"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f functions
          set +e
          echo "::notice ::building - stream-applications-core"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f applications/stream-applications-core
          set +e
          echo "::notice ::core build completed"
  # Build and tests apps and publishes to repo and creates container
  processors:
    if: ${{ needs.parameters.outputs.processors != '' && needs.parameters.outputs.processors != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.processors) }}
    runs-on: ${{ inputs.scale && 'ubuntu-latest' || 'stream-ci' }}
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./build-app.sh "stream-applications/applications/processor/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/processor/${{ matrix.app }}"
  sinks:
    if: ${{ needs.parameters.outputs.sinks != '' && needs.parameters.outputs.sinks != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.sinks) }}
    runs-on: ${{ inputs.scale && 'ubuntu-latest' || 'stream-ci' }}
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
        run: ./build-app.sh "stream-applications/applications/sink/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/sink/${{ matrix.app }}"
  sources:
    if: ${{ needs.parameters.outputs.sources != '' && needs.parameters.outputs.sources != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      # will be removed when private runners are used.
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.sources) }}
    runs-on: ${{ inputs.scale && 'ubuntu-latest' || 'stream-ci' }}
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./build-app.sh "stream-applications/applications/source/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/source/${{ matrix.app }}"
#  scale-down-runners:
#    if: ${{ inputs.scale && success() }}
#    needs:
#      - parameters
#      - scale-runners-up
#      - core
#      - processors
#      - sinks
#      - sources
#    concurrency:
#      group: stream-apps-gh-runners
#      cancel-in-progress: false
#    uses: ./.github/workflows/scale-runners-down.yml
#    with:
#      verbose: ${{ inputs.verbose }}
#      max_parallel: ${{ toJson(needs.parameters.outputs.max_parallel) }}
