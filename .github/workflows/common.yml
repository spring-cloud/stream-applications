name: 'Stream Applications - Common'

on:
  workflow_call:
    inputs:
      branch:
        type: string
        required: false
        default: 'main'
        description: 'Version Tag'
      verbose:
        type: boolean
        required: false
        default: true
        description: 'Verbose output'
    secrets:
      DOCKER_HUB_USERNAME:
      DOCKER_HUB_PASSWORD:
      TMC_API_TOKEN:
      GCP_CRED_JSON:
      CI_DEPLOY_USERNAME:
      CI_DEPLOY_PASSWORD:

jobs:
  parameters:
    runs-on: ubuntu-latest
    steps:
      - name: 'Configure: checkout'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: 'Configure: Ensure scripts are executable'
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: create streams applications matrix'
        shell: bash
        env:
          VERBOSE: ${{ inputs.verbose && 'true' || '' }}
        run: |
          ROOT_DIR=$(realpath $PWD)
          pushd stream-applications > /dev/null
            $ROOT_DIR/create-matrixes.sh
            COUNT=$(jq '.count' matrix.json)
            MAX_PARALLEL=$((5 * COUNT / 4))
            if ((MAX_PARALLEL == COUNT)); then
              MAX_PARALLEL=$((COUNT + 1))
            fi            
            MATRIX=$(jq -c . matrix.json)
            PROCESSORS=$(jq -c '.processors' matrix.json)
            SINKS=$(jq -c '.sinks' matrix.json)
            SOURCES=$(jq -c '.sources' matrix.json)
            echo "MAX_PARALLEL=$MAX_PARALLEL" >> $GITHUB_ENV
            echo "MATRIX=$MATRIX" >> $GITHUB_ENV
            echo "PROCESSORS=$PROCESSORS" >> $GITHUB_ENV
            echo "SINKS=$SINKS" >> $GITHUB_ENV
            echo "SOURCES=$SOURCES" >> $GITHUB_ENV
            if [ "${{ inputs.verbose }}" == "true" ]; then
              echo "MAX_PARALLEL=$MAX_PARALLEL"
              echo "MATRIX=$MATRIX"
              echo "PROCESSORS=$PROCESSORS"
              echo "SINKS=$SINKS"
              echo "SOURCES=$SOURCES"
            fi
          popd
          if [ "${{ inputs.branch }}" == "main" ]; then
            echo "JDK_BUILD=17" >> $GITHUB_ENV
            echo "JRE_DEFAULT=17" >> $GITHUB_ENV
          else
            echo "JDK_BUILD=8" >> $GITHUB_ENV
            echo "JRE_DEFAULT=11" >> $GITHUB_ENV
          fi
    outputs:
      max_parallel: ${{ env.MAX_PARALLEL }}
      sources: ${{ env.SOURCES }}
      sinks: ${{ env.SINKS }}
      processors: ${{ env.PROCESSORS }}
      matrix: ${{ env.matrix }}
      jdk_build: ${{ env.JDK_BUILD }}
      jre_version: ${{ env.JRE_DEFAULT }}
  #  scale-runners:
  #    runs-on: ubuntu-latest
  #    needs:
  #      - parameters
  #    concurrency:
  #      group: stream-apps-gh-runners
  #      cancel-in-progress: false
  #    steps:
  #      - name: 'Configure: checkout stream-applications'
  #        uses: actions/checkout@v3
  #        with:
  #          ref: 'main'
  #      - name: Ensure scripts are executable
  #        shell: bash
  #        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
  #      - name: 'Configure: Configure provider for stream-apps-gh-runners'
  #        shell: bash
  #        timeout-minutes: 15
  #        run: |
  #          RUNNER_TYPE=$(./scripts/determine-provider.sh stream-apps-gh-runners)
  #          echo "RUNNER_TYPE=$RUNNER_TYPE"
  #          echo "RUNNER_TYPE=$RUNNER_TYPE" >> $GITHUB_ENV
  #      - name: 'Install: gcloud cli'
  #        if: ${{ env.RUNNER_TYPE == 'gke' }}
  #        uses: ./.github/actions/install-gcloud
  #      - name: 'Action: gcloud auth'
  #        if: ${{ env.RUNNER_TYPE == 'gke' }}
  #        id: auth_gcloud
  #        uses: 'google-github-actions/auth@v0'
  #        with:
  #          create_credentials_file: true
  #          credentials_json: ${{ secrets.GCP_CRED_JSON }}
  #      - name: 'Configure: Install TMC'
  #        if: ${{ env.RUNNER_TYPE == 'tmc' }}
  #        uses: ./.github/actions/install-tmc
  #      - name: 'Action: Login to TMC'
  #        if: ${{ env.RUNNER_TYPE == 'tmc' }}
  #        uses: ./.github/actions/auth-tmc
  #        timeout-minutes: 15
  #        with:
  #          tmc_api_token: '${{ secrets.TMC_API_TOKEN }}'
  #          fail_on_error: false
  #      - name: 'Install: Groovy'
  #        uses: ./.github/actions/install-groovy
  #        with:
  #          version: 4.0.4
  #      - name: 'Action: wait for cluster - stream-apps-gh-runners'
  #        shell: bash
  #        timeout-minutes: 5
  #        env:
  #          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
  #        run: ./scripts/wait-for-cluster-${RUNNER_TYPE}.sh stream-apps-gh-runners
  #      - name: 'Configure: Cluster Region'
  #        if: ${{ env.PROVIDER == 'gke' }}
  #        shell: bash
  #        run: |
  #          set +e
  #          REGION=$(gcloud container clusters list | grep -F "stream-apps-gh-runners" | awk '{print $2}')
  #          if [ "$REGION" == "" ]; then
  #            echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
  #          else
  #            REG_MT=$(./scripts/determine-default.sh stream-apps-gh-runners "machine_type")
  #            export REGION
  #            CUR_MT=$(./scripts/determine-machine-type.sh)
  #            if [ "$REQ_MT" != "$CUR_MT" ]; then
  #              echo "::notice ::Current machinetype is $CUR_MT and required is $REQ_MT"
  #              echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
  #            fi
  #          fi
  #          echo "REGION=${{ inputs.region }}" >> $GITHUB_ENV
  #      - name: 'Action: Re/Create SCDF PRO Runners'
  #        if: ${{ env.CREATE_CLUSTER == 'true' }}
  #        shell: bash
  #        env:
  #          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
  #        run: |
  #          set +e
  #          ./scripts/delete-runners-${RUNNER_TYPE}.sh
  #          set -e
  #          ./scripts/create-runners-cluster-${RUNNER_TYPE}.sh
  #      - name: 'Action: scale cluster - stream-apps-gh-runners for ${{ needs.parameters.outputs.max_parallel }} runners'
  #        shell: bash
  #        timeout-minutes: 30
  #        env:
  #          CLUSTER_NAME: 'stream-apps-gh-runners'
  #          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
  #        run: |
  #          echo "::notice ::Scaling stream-apps-gh-runners to ${{ needs.parameters.outputs.max_parallel }} pods"
  #          ./scripts/scale-cluster-pods.sh stream-apps-gh-runners ${{ needs.parameters.outputs.max_parallel }}
  #      - name: 'Check: Wait for cluster nodes: stream-apps-gh-runners'
  #        shell: bash
  #        timeout-minutes: 25
  #        env:
  #          VERBOSE: ${{ inputs.verbose && '--verbose' || '' }}
  #        run: |
  #          echo "::notice ::Waiting for cluster stream-apps-gh-runners and it's nodes"
  #          ./scripts/wait-for-cluster-${RUNNER_TYPE}.sh stream-apps-gh-runners --nodes
  #      - name: 'Action: Increase runners with ${{ needs.parameters.outputs.max_parallel }}'
  #        timeout-minutes: 10
  #        uses: ./.github/actions/increase-runners
  #        with:
  #          inc: ${{ needs.parameters.outputs.max_parallel }}
  #    outputs:
  #      runner-type: '${{ env.RUNNER_TYPE }}'
  core:
    runs-on: ubuntu-latest
    needs:
      - parameters
    steps:
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: 'Configure: Ensure scripts are executable'
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Action: build initial dependencies'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          VERBOSE: ${{ inputs.verbose }}
        run: |
          ROOT_DIR=$(realpath $PWD)
          MAVEN_OPT="-B -T 1C -s $ROOT_DIR/.settings.xml ${{ inputs.verbose && '--debug' || '' }}"
          echo "::notice ::building - stream-applications-build"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f stream-applications-build
          set +e
          echo "::notice ::building - functions"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f functions
          set +e
          echo "::notice ::building - stream-applications-core"
          set -e
          $ROOT_DIR/mvnw $MAVEN_OPT deploy -f applications/stream-applications-core
          set +e
          echo "::notice ::core build completed"
  # Build and tests apps and publishes to repo and creates container
  processors:
    if: ${{ needs.parameters.outputs.processors != '' && needs.parameters.outputs.processors != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.processors) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./build-app.sh "stream-applications/applications/processor/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/processor/${{ matrix.app }}"
  sinks:
    if: ${{ needs.parameters.outputs.sinks != '' && needs.parameters.outputs.sinks != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.sinks) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
        run: ./build-app.sh "stream-applications/applications/sink/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/sink/${{ matrix.app }}"
  sources:
    if: ${{ needs.parameters.outputs.sources != '' && needs.parameters.outputs.sources != null }}
    needs:
      - core
      - parameters
    strategy:
      fail-fast: false
      # will be removed when private runners are used.
      matrix:
        app: ${{ fromJson(needs.parameters.outputs.sources) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Configure: checkout stream-applications'
        uses: actions/checkout@v3
        with:
          ref: 'main'
      - name: 'Configure: checkout stream-applications@${{ inputs.branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          path: 'stream-applications'
      - name: Ensure scripts are executable
        shell: bash
        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
      - name: 'Configure: Install Java'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ needs.parameters.outputs.jdk_build }}
      - name: 'Configure: Install Pack'
        uses: ./.github/actions/install-pack
      - name: 'Build: ${{ matrix.app }}'
        shell: bash
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./build-app.sh "stream-applications/applications/source/${{ matrix.app }}"
      - name: 'Publish: ${{ matrix.app }}'
        shell: bash
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DEFAULT_JDK: ${{ needs.parameters.outputs.jre_version }}
          VERBOSE: ${{ inputs.verbose }}
        run: ./publish-app.sh "stream-applications/applications/source/${{ matrix.app }}"
#  scale-down-runners:
#    if: ${{ success() }}
#    runs-on: ubuntu-latest
#    needs:
#      - parameters
#      - scale-runners
#      - core
#      - processors
#      - sinks
#      - sources
#    concurrency:
#      group: stream-apps-gh-runners
#      cancel-in-progress: false
#    steps:
#      - name: 'Configure: Checkout'
#        uses: actions/checkout@v3
#        with:
#          ref: 'main'
#      - name: 'Action: Ensure scripts are executable'
#        shell: bash
#        run: find . -type f -name "*.sh" -exec chmod a+x '{}' \;
#      - name: 'Configure: Runners Cluster provider'
#        shell: bash
#        run: |
#          RUNNER_TYPE=$(./scripts/determine-provider.sh stream-apps-gh-runners)
#          if [ "$RUNNER_TYPE" != "gke" ]; then
#            RUNNER_TYPE=tmc
#          fi
#          echo "RUNNER_TYPE=$RUNNER_TYPE" >> $GITHUB_ENV
#      - name: 'Install: gcloud cli'
#        if: ${{ env.RUNNER_TYPE == 'gke' }}
#        uses: ./.github/actions/install-gcloud
#      - name: 'Action: gcloud auth'
#        if: ${{ env.RUNNER_TYPE == 'gke' }}
#        id: auth_gcloud
#        uses: 'google-github-actions/auth@v0'
#        with:
#          create_credentials_file: true
#          credentials_json: ${{ secrets.GCP_CRED_JSON }}
#      - name: 'Configure: Install TMC'
#        if: ${{ env.RUNNER_TYPE == 'tmc' }}
#        uses: ./.github/actions/install-tmc
#      - name: 'Action: Login to TMC'
#        if: ${{ env.RUNNER_TYPE == 'tmc' }}
#        uses: ./.github/actions/auth-tmc
#        with:
#          tmc_api_token: '${{ secrets.TMC_API_TOKEN }}'
#      - name: 'Action: Decrease runners with ${{ needs.parameters.outputs.max_parallel }}'
#        timeout-minutes: 10
#        uses: ./.github/actions/decrease-runners
#        with:
#          dec: ${{ needs.parameters.outputs.max_parallel }}
